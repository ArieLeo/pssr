// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSClear
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Result;
Texture2D inputTexture;
float3 cmrPos;
float WaterHeight;
float4x4 matrix_VP;
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	 float3 wpos=inputTexture[id.xy].xyz;
	  wpos.y -= WaterHeight;
	  wpos.y=-wpos.y;
	 cmrPos.y  -=WaterHeight;
	 float3 waterWPos=lerp(wpos,cmrPos,abs(wpos.y)/(abs(wpos.y)+abs(cmrPos.y)));
	 waterWPos.y += WaterHeight;
	float3 uv= mul(matrix_VP,float4(waterWPos,1));
	uv/=uv.z;
	uv=uv/2+0.5;
uint2 uvint=(uint2)( uv.xy*256+float2(0.5,0.5));
if (wpos.y < 0)
	Result[uvint] = 1;//  float4(1, 0, 0, 1);
	//Result[uvint+uint2(1,1)*4] += float4(0.1,0,0,0);
	//Result[uvint-uint2(1,1)*4] += float4(0.1,0,0,0);
}

 
[numthreads(8, 8, 1)]
void CSClear(uint3 id : SV_DispatchThreadID)
{
 
	Result[id.xy] = 0;// Result[id.xy] + float4(0, 1, 0, 0);
 
}
